import { Pose2d, Translation2d } from "../geometry";
import { convert } from "../units";
import TabRenderer from "./TabRenderer";

export default class LinesVisualizer implements TabRenderer {
  private CONTAINER: HTMLElement;
  private CANVAS: HTMLCanvasElement;
  private IMAGE: HTMLImageElement;

  private lastImageSource = "";

  constructor(container: HTMLElement) {
    this.CONTAINER = container;
    this.CANVAS = container.firstElementChild as HTMLCanvasElement;
    this.IMAGE = document.createElement("img");
    this.CANVAS.appendChild(this.IMAGE);
  }
  getAspectRatio(): number | null {
    return null;
  }
  saveState() {
    return null;
  }

  restoreState(): void {}

  render(command: any): number | null {
    // Set up canvas
    let context = this.CANVAS.getContext("2d") as CanvasRenderingContext2D;
    let width = this.CONTAINER.clientWidth;
    let height = this.CONTAINER.clientHeight;
    this.CANVAS.style.width = width.toString() + "px";
    this.CANVAS.style.height = height.toString() + "px";
    this.CANVAS.width = width * window.devicePixelRatio;
    this.CANVAS.height = height * window.devicePixelRatio;
    context.scale(window.devicePixelRatio, window.devicePixelRatio);
    context.clearRect(0, 0, width, height);

    // Get game data and update image element
    let gameData = window.assets?.field2ds.find((game) => game.name === command.options.game);
    if (!gameData) return null;
    if (gameData.path !== this.lastImageSource) {
      this.lastImageSource = gameData.path;
      this.IMAGE.src = gameData.path;
    }
    if (!(this.IMAGE.width > 0 && this.IMAGE.height > 0)) {
      return null;
    }

    // Determine if objects are flipped
    let objectsFlipped: boolean;

    // Render background
    let fieldWidth = gameData.bottomRight[0] - gameData.topLeft[0];
    let fieldHeight = gameData.bottomRight[1] - gameData.topLeft[1];

    let topMargin = gameData.topLeft[1];
    let bottomMargin = this.IMAGE.height - gameData.bottomRight[1];
    let leftMargin = gameData.topLeft[0];
    let rightMargin = this.IMAGE.width - gameData.bottomRight[0];

    let margin = Math.min(topMargin, bottomMargin, leftMargin, rightMargin);
    let extendedFieldWidth = fieldWidth + margin * 2;
    let extendedFieldHeight = fieldHeight + margin * 2;
    let constrainHeight = width / height > extendedFieldWidth / extendedFieldHeight;
    let imageScalar: number;
    if (constrainHeight) {
      imageScalar = height / extendedFieldHeight;
    } else {
      imageScalar = width / extendedFieldWidth;
    }
    let fieldCenterX = fieldWidth * 0.5 + gameData.topLeft[0];
    let fieldCenterY = fieldHeight * 0.5 + gameData.topLeft[1];
    let renderValues = [
      Math.floor(width * 0.5 - fieldCenterX * imageScalar), // X (normal)
      Math.floor(height * 0.5 - fieldCenterY * imageScalar), // Y (normal)
      Math.ceil(width * -0.5 - fieldCenterX * imageScalar), // X (flipped)
      Math.ceil(height * -0.5 - fieldCenterY * imageScalar), // Y (flipped)
      this.IMAGE.width * imageScalar, // Width
      this.IMAGE.height * imageScalar // Height
    ];
    context.drawImage(this.IMAGE, renderValues[0], renderValues[1], renderValues[4], renderValues[5]);

    // Calculate field edges
    let canvasFieldLeft = renderValues[0] + gameData.topLeft[0] * imageScalar;
    let canvasFieldTop = renderValues[1] + gameData.topLeft[1] * imageScalar;
    let canvasFieldWidth = fieldWidth * imageScalar;
    let canvasFieldHeight = fieldHeight * imageScalar;
    let pixelsPerInch = (canvasFieldHeight / gameData.heightInches + canvasFieldWidth / gameData.widthInches) / 2;
    let pixelsPerUnit = convert(pixelsPerInch, command.options.unitDistance, "inches");

    // Convert translation to pixel coordinates
    let calcCoordinates = (translation: Translation2d): [number, number] => {
      if (!gameData) return [0, 0];
      let positionInches = [convert(translation[0], "meters", "inches"), convert(translation[1], "meters", "inches")];

      positionInches[1] *= -1; // Positive y is flipped on the canvas
      switch (command.options.origin) {
        case "blue left":
          break;
        case "blue center":
          positionInches[1] += gameData.heightInches / 2;
          break;
        case "blue right":
          positionInches[1] += gameData.heightInches;
          break;
        case "red left":
          objectsFlipped = true;
          break;
        case "red center":
          positionInches[1] += gameData.heightInches / 2;
          objectsFlipped = true;
          break;
        case "red right":
          positionInches[1] += gameData.heightInches;
          objectsFlipped = true;
          break;
      }

      let positionPixels: [number, number] = [
        positionInches[0] * (canvasFieldWidth / gameData.widthInches),
        positionInches[1] * (canvasFieldHeight / gameData.heightInches)
      ];
      if (objectsFlipped) {
        positionPixels[0] = canvasFieldLeft + canvasFieldWidth - positionPixels[0];
        positionPixels[1] = canvasFieldTop + canvasFieldHeight - positionPixels[1];
      } else {
        positionPixels[0] += canvasFieldLeft;
        positionPixels[1] += canvasFieldTop;
      }
      return positionPixels;
    };

    // Draw blue lines with a point at each end
    command.poses.lines.forEach((line: Pose2d[]) => {
      context.strokeStyle = "blue";
      context.lineWidth = command.options.lineThickness * pixelsPerUnit;
      context.lineCap = "round";
      context.lineJoin = "round";
      context.beginPath();
      context.moveTo(...calcCoordinates(line[0].translation));
      context.lineTo(...calcCoordinates(line[1].translation));
      context.stroke();
      context.fillStyle = "blue";
      context.beginPath();
      context.arc(
        ...calcCoordinates(line[0].translation),
        command.options.pointSize * pixelsPerUnit * 0.5,
        0,
        2 * Math.PI
      );
      context.fill();
      context.beginPath();
      context.arc(
        ...calcCoordinates(line[1].translation),
        command.options.pointSize * pixelsPerUnit * 0.5,
        0,
        2 * Math.PI
      );
      context.fill();
    });
    // Draw trajectories
    command.poses.trajectory.forEach((trajectory: Pose2d[]) => {
      context.strokeStyle = "orange";
      context.lineWidth = command.options.trajectoryThickness * pixelsPerUnit;
      context.lineCap = "round";
      context.lineJoin = "round";
      context.beginPath();
      let firstPoint = true;
      trajectory.forEach((pose) => {
        if (firstPoint) {
          context.moveTo(...calcCoordinates(pose.translation));
          firstPoint = false;
        } else {
          context.lineTo(...calcCoordinates(pose.translation));
        }
      });
      context.stroke();
    });
    // Draw points
    command.poses.points.forEach((point: Pose2d) => {
      context.fillStyle = "red";
      context.beginPath();
      context.arc(
        ...calcCoordinates(point.translation),
        command.options.pointSize * pixelsPerUnit * 0.5,
        0,
        2 * Math.PI
      );
      context.fill();
    });

    // Return target aspect ratio
    return fieldWidth / fieldHeight;
  }
}
